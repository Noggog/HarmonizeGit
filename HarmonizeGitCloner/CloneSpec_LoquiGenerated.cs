/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using HarmonizeGitCloner.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace HarmonizeGitCloner
{
    #region Class
    public partial class CloneSpec : ICloneSpec, ILoquiObjectSetter, IEquatable<CloneSpec>
    {
        ILoquiRegistration ILoquiObject.Registration => CloneSpec_Registration.Instance;
        public static CloneSpec_Registration Registration => CloneSpec_Registration.Instance;

        #region Ctor
        public CloneSpec()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ExplicitClones
        private readonly INotifyingList<Clone> _ExplicitClones = new NotifyingList<Clone>();
        public INotifyingList<Clone> ExplicitClones => _ExplicitClones;
        #region Interface Members
        INotifyingList<Clone> ICloneSpec.ExplicitClones => _ExplicitClones;
        INotifyingListGetter<Clone> ICloneSpecGetter.ExplicitClones => _ExplicitClones;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => CloneSpecCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => CloneSpecCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => CloneSpecCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CloneSpecCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return CloneSpecCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            CloneSpec_Mask<bool> printMask = null)
        {
            return CloneSpecCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CloneSpecCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public CloneSpec_Mask<bool> GetHasBeenSetMask()
        {
            return CloneSpecCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is CloneSpec rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CloneSpec rhs)
        {
            if (rhs == null) return false;
            if (ExplicitClones.HasBeenSet != rhs.ExplicitClones.HasBeenSet) return false;
            if (ExplicitClones.HasBeenSet)
            {
                if (!ExplicitClones.SequenceEqual(rhs.ExplicitClones)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (ExplicitClones.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ExplicitClones).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public static CloneSpec Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static CloneSpec Create_XML(
            XElement root,
            out CloneSpec_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static CloneSpec Create_XML(
            XElement root,
            bool doMasks,
            out CloneSpec_ErrorMask errorMask)
        {
            CloneSpec_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CloneSpec_ErrorMask()) : default(Func<CloneSpec_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        public static CloneSpec Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static CloneSpec Create_XML(
            string path,
            out CloneSpec_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static CloneSpec Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static CloneSpec Create_XML(
            Stream stream,
            out CloneSpec_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<CloneSpec, CloneSpec_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out CloneSpec_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out CloneSpec_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<CloneSpec, CloneSpec_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out CloneSpec_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out CloneSpec_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out CloneSpec_ErrorMask errorMask,
            string name = null)
        {
            CloneSpecCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(
            string path,
            out CloneSpec_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out CloneSpec_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            CloneSpecCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out CloneSpec_ErrorMask errorMask);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        #endregion

        private static CloneSpec Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<CloneSpec_ErrorMask> errorMask)
        {
            var ret = new CloneSpec();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            CloneSpec item,
            XElement root,
            string name,
            bool doMasks,
            Func<CloneSpec_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "ExplicitClones":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Clone_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<Clone, MaskItem<Exception, Clone_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, Clone_ErrorMask> listSubMask) =>
                            {
                                Clone_ErrorMask loquiMask;
                                TryGet<Clone> tryGet;
                                var typeStr = r.GetAttribute(XmlConstants.TYPE_ATTRIBUTE);
                                if (typeStr != null
                                    && typeStr.Equals("HarmonizeGitCloner.Clone"))
                                {
                                    tryGet = TryGet<Clone>.Succeed((Clone)Clone.Create_XML(
                                        root: r,
                                        doMasks: listDoMasks,
                                        errorMask: out loquiMask));
                                }
                                else
                                {
                                    var register = LoquiRegistration.GetRegisterByFullName(typeStr ?? r.Name.LocalName);
                                    if (register == null)
                                    {
                                        var ex = new ArgumentException($"Unknown Loqui type: {r.Name.LocalName}");
                                        if (!listDoMasks) throw ex;
                                        listSubMask = new MaskItem<Exception, Clone_ErrorMask>(
                                            ex,
                                            null);
                                        return TryGet<Clone>.Fail(null);
                                    }
                                    tryGet = XmlTranslator.Instance.GetTranslator(register.ClassType).Item.Value.Parse(
                                        root: root,
                                        doMasks: listDoMasks,
                                        maskObj: out var subErrorMaskObj).Bubble((o) => (Clone)o);
                                    loquiMask = (Clone_ErrorMask)subErrorMaskObj;
                                }
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, Clone_ErrorMask>(null, loquiMask);
                                return tryGet;
                            }
                            );
                        item._ExplicitClones.SetIfSucceeded(listTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ExplicitClones = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public CloneSpec Copy(
            CloneSpec_CopyMask copyMask = null,
            ICloneSpecGetter def = null)
        {
            return CloneSpec.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static CloneSpec Copy(
            ICloneSpec item,
            CloneSpec_CopyMask copyMask = null,
            ICloneSpecGetter def = null)
        {
            CloneSpec ret;
            if (item.GetType().Equals(typeof(CloneSpec)))
            {
                ret = new CloneSpec();
            }
            else
            {
                ret = (CloneSpec)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            CloneSpec_CopyMask copyMask = null,
            ICloneSpecGetter def = null)
            where CopyType : class, ICloneSpec
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(CloneSpec)))
            {
                ret = new CloneSpec() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static CloneSpec Copy_ToLoqui(
            ICloneSpecGetter item,
            CloneSpec_CopyMask copyMask = null,
            ICloneSpecGetter def = null)
        {
            var ret = new CloneSpec();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    this._ExplicitClones.SetTo((IEnumerable<Clone>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CloneSpecCommon.Clear(this, cmds);
        }


        public static CloneSpec Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new CloneSpec();
            foreach (var pair in fields)
            {
                CopyInInternal_CloneSpec(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_CloneSpec(CloneSpec obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out CloneSpec_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    obj._ExplicitClones.SetTo((IEnumerable<Clone>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, CloneSpec obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ICloneSpec : ICloneSpecGetter, ILoquiClass<ICloneSpec, ICloneSpecGetter>, ILoquiClass<CloneSpec, ICloneSpecGetter>
    {
        new INotifyingList<Clone> ExplicitClones { get; }
    }

    public interface ICloneSpecGetter : ILoquiObject
    {
        #region ExplicitClones
        INotifyingListGetter<Clone> ExplicitClones { get; }
        #endregion

    }

    #endregion

}

namespace HarmonizeGitCloner.Internals
{
    #region Field Index
    public enum CloneSpec_FieldIndex
    {
        ExplicitClones = 0,
    }
    #endregion

    #region Registration
    public class CloneSpec_Registration : ILoquiRegistration
    {
        public static readonly CloneSpec_Registration Instance = new CloneSpec_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_HarmonizeGitCloner.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_HarmonizeGitCloner.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "651b1c2a-304e-4f21-85cb-d1088f16dc21";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(CloneSpec_Mask<>);

        public static readonly Type ErrorMaskType = typeof(CloneSpec_ErrorMask);

        public static readonly Type ClassType = typeof(CloneSpec);

        public static readonly Type GetterType = typeof(ICloneSpecGetter);

        public static readonly Type SetterType = typeof(ICloneSpec);

        public static readonly Type CommonType = typeof(CloneSpecCommon);

        public const string FullName = "HarmonizeGitCloner.CloneSpec";

        public const string Name = "CloneSpec";

        public const string Namespace = "HarmonizeGitCloner";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "EXPLICITCLONES":
                    return (ushort)CloneSpec_FieldIndex.ExplicitClones;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return "ExplicitClones";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return typeof(NotifyingList<Clone>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class CloneSpecCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ICloneSpec item,
            ICloneSpecGetter rhs,
            CloneSpec_CopyMask copyMask = null,
            ICloneSpecGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            CloneSpecCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ICloneSpec item,
            ICloneSpecGetter rhs,
            out CloneSpec_ErrorMask errorMask,
            CloneSpec_CopyMask copyMask = null,
            ICloneSpecGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            CloneSpecCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ICloneSpec item,
            ICloneSpecGetter rhs,
            ICloneSpecGetter def,
            bool doErrorMask,
            out CloneSpec_ErrorMask errorMask,
            CloneSpec_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            CloneSpec_ErrorMask retErrorMask = null;
            Func<CloneSpec_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new CloneSpec_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ICloneSpec item,
            ICloneSpecGetter rhs,
            ICloneSpecGetter def,
            bool doErrorMask,
            Func<CloneSpec_ErrorMask> errorMask,
            CloneSpec_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.ExplicitClones.Overall != CopyOption.Skip)
            {
                try
                {
                    item.ExplicitClones.SetToWithDefault(
                        rhs.ExplicitClones,
                        def?.ExplicitClones,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.ExplicitClones.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(copyMask?.ExplicitClones.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.ExplicitClones.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((ushort)CloneSpec_FieldIndex.ExplicitClones, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICloneSpec obj,
            NotifyingFireParameters? cmds = null)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    obj.ExplicitClones.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICloneSpec obj,
            NotifyingUnsetParameters? cmds = null)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    obj.ExplicitClones.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICloneSpec obj)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return obj.ExplicitClones.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ICloneSpecGetter obj)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    return obj.ExplicitClones;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ICloneSpec item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.ExplicitClones.Unset(cmds.ToUnsetParams());
        }

        public static CloneSpec_Mask<bool> GetEqualsMask(
            this ICloneSpecGetter item,
            ICloneSpecGetter rhs)
        {
            var ret = new CloneSpec_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICloneSpecGetter item,
            ICloneSpecGetter rhs,
            CloneSpec_Mask<bool> ret)
        {
            if (rhs == null) return;
            if (item.ExplicitClones.HasBeenSet == rhs.ExplicitClones.HasBeenSet)
            {
                if (item.ExplicitClones.HasBeenSet)
                {
                    ret.ExplicitClones = new MaskItem<bool, IEnumerable<MaskItem<bool, Clone_Mask<bool>>>>();
                    ret.ExplicitClones.Specific = item.ExplicitClones.SelectAgainst<Clone, MaskItem<bool, Clone_Mask<bool>>>(rhs.ExplicitClones, ((l, r) =>
                    {
                        MaskItem<bool, Clone_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => CloneCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.ExplicitClones.Overall);
                    ret.ExplicitClones.Overall = ret.ExplicitClones.Overall && ret.ExplicitClones.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.ExplicitClones = new MaskItem<bool, IEnumerable<MaskItem<bool, Clone_Mask<bool>>>>();
                    ret.ExplicitClones.Overall = true;
                }
            }
            else
            {
                ret.ExplicitClones = new MaskItem<bool, IEnumerable<MaskItem<bool, Clone_Mask<bool>>>>();
                ret.ExplicitClones.Overall = false;
            }
        }

        public static string ToString(
            this ICloneSpecGetter item,
            string name = null,
            CloneSpec_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICloneSpecGetter item,
            FileGeneration fg,
            string name = null,
            CloneSpec_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(CloneSpec)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(CloneSpec)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ExplicitClones?.Overall ?? true)
                {
                    fg.AppendLine("ExplicitClones =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.ExplicitClones)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICloneSpecGetter item,
            CloneSpec_Mask<bool?> checkMask)
        {
            if (checkMask.ExplicitClones.Overall.HasValue && checkMask.ExplicitClones.Overall.Value != item.ExplicitClones.HasBeenSet) return false;
            return true;
        }

        public static CloneSpec_Mask<bool> GetHasBeenSetMask(ICloneSpecGetter item)
        {
            var ret = new CloneSpec_Mask<bool>();
            ret.ExplicitClones = new MaskItem<bool, IEnumerable<MaskItem<bool, Clone_Mask<bool>>>>(item.ExplicitClones.HasBeenSet, item.ExplicitClones.Select((i) => new MaskItem<bool, Clone_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ICloneSpecGetter item,
            bool doMasks,
            out CloneSpec_ErrorMask errorMask,
            string name = null)
        {
            CloneSpec_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new CloneSpec_ErrorMask()) : default(Func<CloneSpec_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ICloneSpecGetter item,
            bool doMasks,
            Func<CloneSpec_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "HarmonizeGitCloner.CloneSpec"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "HarmonizeGitCloner.CloneSpec");
                    }
                    if (item.ExplicitClones.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, Clone_ErrorMask>>> subMask;
                        ListXmlTranslation<Clone, MaskItem<Exception, Clone_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.ExplicitClones),
                            item: item.ExplicitClones,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (Clone subItem, bool listDoMasks, out MaskItem<Exception, Clone_ErrorMask> listSubMask) =>
                            {
                                CloneCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    errorMask: out Clone_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, Clone_ErrorMask>(null, loquiMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().ExplicitClones = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class CloneSpec_Mask<T> : IMask<T>, IEquatable<CloneSpec_Mask<T>>
    {
        #region Ctors
        public CloneSpec_Mask()
        {
        }

        public CloneSpec_Mask(T initialValue)
        {
            this.ExplicitClones = new MaskItem<T, IEnumerable<MaskItem<T, Clone_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, Clone_Mask<T>>>> ExplicitClones;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is CloneSpec_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(CloneSpec_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ExplicitClones, rhs.ExplicitClones)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ExplicitClones?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (ExplicitClones != null)
            {
                if (!eval(this.ExplicitClones.Overall)) return false;
                if (ExplicitClones.Specific != null)
                {
                    foreach (var item in ExplicitClones.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public CloneSpec_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new CloneSpec_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(CloneSpec_Mask<R> obj, Func<T, R> eval)
        {
            if (ExplicitClones != null)
            {
                obj.ExplicitClones = new MaskItem<R, IEnumerable<MaskItem<R, Clone_Mask<R>>>>();
                obj.ExplicitClones.Overall = eval(this.ExplicitClones.Overall);
                if (ExplicitClones.Specific != null)
                {
                    List<MaskItem<R, Clone_Mask<R>>> l = new List<MaskItem<R, Clone_Mask<R>>>();
                    obj.ExplicitClones.Specific = l;
                    foreach (var item in ExplicitClones.Specific)
                    {
                        MaskItem<R, Clone_Mask<R>> mask = default(MaskItem<R, Clone_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Clone_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.ExplicitClones.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(CloneSpec_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, CloneSpec_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(CloneSpec_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ExplicitClones?.Overall ?? true)
                {
                    fg.AppendLine("ExplicitClones =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ExplicitClones.Overall != null)
                        {
                            fg.AppendLine(ExplicitClones.Overall.ToString());
                        }
                        if (ExplicitClones.Specific != null)
                        {
                            foreach (var subItem in ExplicitClones.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class CloneSpec_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Clone_ErrorMask>>> ExplicitClones;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    this.ExplicitClones = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Clone_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            CloneSpec_FieldIndex enu = (CloneSpec_FieldIndex)index;
            switch (enu)
            {
                case CloneSpec_FieldIndex.ExplicitClones:
                    this.ExplicitClones = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Clone_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("CloneSpec_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (ExplicitClones != null)
            {
                fg.AppendLine("ExplicitClones =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (ExplicitClones.Overall != null)
                    {
                        fg.AppendLine(ExplicitClones.Overall.ToString());
                    }
                    if (ExplicitClones.Specific != null)
                    {
                        foreach (var subItem in ExplicitClones.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
        }
        #endregion

        #region Combine
        public CloneSpec_ErrorMask Combine(CloneSpec_ErrorMask rhs)
        {
            var ret = new CloneSpec_ErrorMask();
            ret.ExplicitClones = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Clone_ErrorMask>>>(this.ExplicitClones.Overall.Combine(rhs.ExplicitClones.Overall), new List<MaskItem<Exception, Clone_ErrorMask>>(this.ExplicitClones.Specific.And(rhs.ExplicitClones.Specific)));
            return ret;
        }
        public static CloneSpec_ErrorMask Combine(CloneSpec_ErrorMask lhs, CloneSpec_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class CloneSpec_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Clone_CopyMask> ExplicitClones;
        #endregion

    }
    #endregion


    #endregion

}
