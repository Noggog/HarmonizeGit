/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using HarmonizeGitCloner.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace HarmonizeGitCloner
{
    #region Class
    public partial class Clone :
        LoquiNotifyingObject,
        ICloneInternal,
        ILoquiObjectSetter<Clone>,
        IEquatable<Clone>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Clone_Registration.Instance;
        public static Clone_Registration Registration => Clone_Registration.Instance;
        protected object CommonInstance => CloneCommon.Instance;
        object ICloneInternalGetter.CommonInstance => this.CommonInstance;

        #region Ctor
        public Clone()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Nickname
        private String _Nickname;
        public String Nickname
        {
            get => this._Nickname;
            set => this.RaiseAndSetIfReferenceChanged(ref this._Nickname, value, nameof(Nickname));
        }
        #endregion
        #region ClonePath
        private String _ClonePath;
        public String ClonePath
        {
            get => this._ClonePath;
            set => this.RaiseAndSetIfReferenceChanged(ref this._ClonePath, value, nameof(ClonePath));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICloneInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CloneMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ICloneInternalGetter rhs)) return false;
            return ((CloneCommon)((ICloneInternalGetter)this).CommonInstance).Equals(this, rhs);
        }

        public bool Equals(Clone obj)
        {
            return ((CloneCommon)((ICloneInternalGetter)this).CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((CloneCommon)((ICloneInternalGetter)this).CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => CloneXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static Clone CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Clone_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Clone CreateFromXml(
            XElement node,
            out Clone_ErrorMask errorMask,
            bool doMasks = true,
            Clone_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Clone_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Clone CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Clone() : null;
                    break;
                default:
                    break;
            }
            var ret = new Clone();
            try
            {
                foreach (var elem in node.Elements())
                {
                    CloneXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Clone CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Clone_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Clone CreateFromXml(
            string path,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Clone CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Clone_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Clone CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Clone_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Clone CreateFromXml(
            Stream stream,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Clone CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Clone_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Clone_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<Clone>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Clone_FieldIndex)index)
            {
                case Clone_FieldIndex.Nickname:
                case Clone_FieldIndex.ClonePath:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Clone Copy(
            Clone_CopyMask copyMask = null,
            Clone def = null)
        {
            return Clone.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Clone Copy(
            Clone item,
            Clone_CopyMask copyMask = null,
            Clone def = null)
        {
            Clone ret;
            if (item.GetType().Equals(typeof(Clone)))
            {
                ret = new Clone();
            }
            else
            {
                ret = (Clone)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Clone Copy_ToLoqui(
            Clone item,
            Clone_CopyMask copyMask = null,
            Clone def = null)
        {
            Clone ret;
            if (item.GetType().Equals(typeof(Clone)))
            {
                ret = new Clone() as Clone;
            }
            else
            {
                ret = (Clone)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(Clone rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Clone rhs,
            Clone_CopyMask copyMask,
            Clone def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Clone rhs,
            out Clone_ErrorMask errorMask,
            Clone_CopyMask copyMask = null,
            Clone def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CloneCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Clone_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Clone rhs,
            ErrorMaskBuilder errorMask,
            Clone_CopyMask copyMask = null,
            Clone def = null)
        {
            CloneCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    this.Nickname = (String)obj;
                    break;
                case Clone_FieldIndex.ClonePath:
                    this.ClonePath = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            CloneCommon.Instance.Clear(this);
        }

        public static Clone Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Clone();
            foreach (var pair in fields)
            {
                CopyInInternal_Clone(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Clone(Clone obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Clone_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    obj.Nickname = (String)pair.Value;
                    break;
                case Clone_FieldIndex.ClonePath:
                    obj.ClonePath = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IClone :
        ICloneInternalGetter,
        ILoquiObjectSetter<ICloneInternal>
    {
        new String Nickname { get; set; }

        new String ClonePath { get; set; }

        void CopyFieldsFrom(
            Clone rhs,
            ErrorMaskBuilder errorMask = null,
            Clone_CopyMask copyMask = null,
            Clone def = null);
    }

    public partial interface ICloneInternal :
        IClone,
        ICloneInternalGetter
    {
    }

    public partial interface ICloneGetter :
        ILoquiObject,
        ILoquiObject<ICloneInternalGetter>,
        IXmlItem
    {
        #region Nickname
        String Nickname { get; }

        #endregion
        #region ClonePath
        String ClonePath { get; }

        #endregion

    }

    public partial interface ICloneInternalGetter : ICloneGetter
    {
        object CommonInstance { get; }

    }

    #endregion

    #region Common MixIn
    public static class CloneMixIn
    {
        public static void Clear(this ICloneInternal item)
        {
            ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).Clear(item: item);
        }

        public static Clone_Mask<bool> GetEqualsMask(
            this ICloneInternalGetter item,
            ICloneInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICloneInternalGetter item,
            string name = null,
            Clone_Mask<bool> printMask = null)
        {
            return ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICloneInternalGetter item,
            FileGeneration fg,
            string name = null,
            Clone_Mask<bool> printMask = null)
        {
            ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICloneInternalGetter item,
            Clone_Mask<bool?> checkMask)
        {
            return ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Clone_Mask<bool> GetHasBeenSetMask(this ICloneInternalGetter item)
        {
            var ret = new Clone_Mask<bool>();
            ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICloneInternalGetter item,
            ICloneInternalGetter rhs)
        {
            return ((CloneCommon)((ICloneInternalGetter)item).CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace HarmonizeGitCloner.Internals
{
    #region Field Index
    public enum Clone_FieldIndex
    {
        Nickname = 0,
        ClonePath = 1,
    }
    #endregion

    #region Registration
    public class Clone_Registration : ILoquiRegistration
    {
        public static readonly Clone_Registration Instance = new Clone_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_HarmonizeGitCloner.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_HarmonizeGitCloner.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "0bfc02a5-d0a6-4133-a58a-de62dd81525c";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Clone_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Clone_ErrorMask);

        public static readonly Type ClassType = typeof(Clone);

        public static readonly Type GetterType = typeof(ICloneGetter);

        public static readonly Type InternalGetterType = typeof(ICloneInternalGetter);

        public static readonly Type SetterType = typeof(IClone);

        public static readonly Type InternalSetterType = typeof(ICloneInternal);

        public static readonly Type CommonType = typeof(CloneCommon);

        public const string FullName = "HarmonizeGitCloner.Clone";

        public const string Name = "Clone";

        public const string Namespace = "HarmonizeGitCloner";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NICKNAME":
                    return (ushort)Clone_FieldIndex.Nickname;
                case "CLONEPATH":
                    return (ushort)Clone_FieldIndex.ClonePath;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                case Clone_FieldIndex.ClonePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                case Clone_FieldIndex.ClonePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                case Clone_FieldIndex.ClonePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    return "Nickname";
                case Clone_FieldIndex.ClonePath:
                    return "ClonePath";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                case Clone_FieldIndex.ClonePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                case Clone_FieldIndex.ClonePath:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    return typeof(String);
                case Clone_FieldIndex.ClonePath:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CloneXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CloneCommon
    {
        public static readonly CloneCommon Instance = new CloneCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Clone item,
            Clone rhs,
            Clone def,
            ErrorMaskBuilder errorMask,
            Clone_CopyMask copyMask)
        {
            if (copyMask?.Nickname ?? true)
            {
                errorMask?.PushIndex((int)Clone_FieldIndex.Nickname);
                try
                {
                    item.Nickname = rhs.Nickname;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ClonePath ?? true)
            {
                errorMask?.PushIndex((int)Clone_FieldIndex.ClonePath);
                try
                {
                    item.ClonePath = rhs.ClonePath;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ICloneInternal item)
        {
            ClearPartial();
            item.Nickname = default(String);
            item.ClonePath = default(String);
        }

        public Clone_Mask<bool> GetEqualsMask(
            ICloneInternalGetter item,
            ICloneInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Clone_Mask<bool>();
            this.FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ICloneInternalGetter item,
            ICloneInternalGetter rhs,
            Clone_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Nickname = string.Equals(item.Nickname, rhs.Nickname);
            ret.ClonePath = string.Equals(item.ClonePath, rhs.ClonePath);
        }

        public string ToString(
            ICloneInternalGetter item,
            string name = null,
            Clone_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ICloneInternalGetter item,
            FileGeneration fg,
            string name = null,
            Clone_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Clone =>");
            }
            else
            {
                fg.AppendLine($"{name} (Clone) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ICloneInternalGetter item,
            FileGeneration fg,
            Clone_Mask<bool> printMask = null)
        {
            if (printMask?.Nickname ?? true)
            {
                fg.AppendLine($"Nickname => {item.Nickname}");
            }
            if (printMask?.ClonePath ?? true)
            {
                fg.AppendLine($"ClonePath => {item.ClonePath}");
            }
        }

        public bool HasBeenSet(
            ICloneInternalGetter item,
            Clone_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            ICloneInternalGetter item,
            Clone_Mask<bool> mask)
        {
            mask.Nickname = true;
            mask.ClonePath = true;
        }

        #region Equals and Hash
        public virtual bool Equals(
            ICloneInternalGetter lhs,
            ICloneInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.Nickname, rhs.Nickname)) return false;
            if (!string.Equals(lhs.ClonePath, rhs.ClonePath)) return false;
            return true;
        }

        public virtual int GetHashCode(ICloneInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Nickname).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ClonePath).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class CloneXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CloneXmlWriteTranslation Instance = new CloneXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICloneInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Clone_FieldIndex.Nickname) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Nickname),
                    item: item.Nickname,
                    fieldIndex: (int)Clone_FieldIndex.Nickname,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Clone_FieldIndex.ClonePath) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ClonePath),
                    item: item.ClonePath,
                    fieldIndex: (int)Clone_FieldIndex.ClonePath,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICloneInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "HarmonizeGitCloner.Clone");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "HarmonizeGitCloner.Clone");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ICloneInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICloneInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ICloneInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CloneXmlCreateTranslation
    {
        public readonly static CloneXmlCreateTranslation Instance = new CloneXmlCreateTranslation();

        public static void FillPublicXml(
            ICloneInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CloneXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICloneInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Nickname":
                    if ((translationMask?.GetShouldTranslate((int)Clone_FieldIndex.Nickname) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Clone_FieldIndex.Nickname);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String NicknameParse,
                                errorMask: errorMask))
                            {
                                item.Nickname = NicknameParse;
                            }
                            else
                            {
                                item.Nickname = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ClonePath":
                    if ((translationMask?.GetShouldTranslate((int)Clone_FieldIndex.ClonePath) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Clone_FieldIndex.ClonePath);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String ClonePathParse,
                                errorMask: errorMask))
                            {
                                item.ClonePath = ClonePathParse;
                            }
                            else
                            {
                                item.ClonePath = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class CloneXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICloneInternalGetter item,
            XElement node,
            out Clone_ErrorMask errorMask,
            bool doMasks = true,
            Clone_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((CloneXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Clone_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            string path,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            Stream stream,
            out Clone_ErrorMask errorMask,
            Clone_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((CloneXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            XElement node,
            string name = null,
            Clone_TranslationMask translationMask = null)
        {
            ((CloneXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CloneXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICloneInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((CloneXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Clone_Mask<T> : IMask<T>, IEquatable<Clone_Mask<T>>
    {
        #region Ctors
        public Clone_Mask()
        {
        }

        public Clone_Mask(T initialValue)
        {
            this.Nickname = initialValue;
            this.ClonePath = initialValue;
        }
        #endregion

        #region Members
        public T Nickname;
        public T ClonePath;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Clone_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Clone_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Nickname, rhs.Nickname)) return false;
            if (!object.Equals(this.ClonePath, rhs.ClonePath)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Nickname?.GetHashCode());
            ret = ret.CombineHashCode(this.ClonePath?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Nickname)) return false;
            if (!eval(this.ClonePath)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Clone_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Clone_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Clone_Mask<R> obj, Func<T, R> eval)
        {
            obj.Nickname = eval(this.Nickname);
            obj.ClonePath = eval(this.ClonePath);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Clone_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Clone_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Clone_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Nickname ?? true)
                {
                    fg.AppendLine($"Nickname => {Nickname}");
                }
                if (printMask?.ClonePath ?? true)
                {
                    fg.AppendLine($"ClonePath => {ClonePath}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Clone_ErrorMask : IErrorMask, IErrorMask<Clone_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Nickname;
        public Exception ClonePath;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    return Nickname;
                case Clone_FieldIndex.ClonePath:
                    return ClonePath;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    this.Nickname = ex;
                    break;
                case Clone_FieldIndex.ClonePath:
                    this.ClonePath = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Clone_FieldIndex enu = (Clone_FieldIndex)index;
            switch (enu)
            {
                case Clone_FieldIndex.Nickname:
                    this.Nickname = (Exception)obj;
                    break;
                case Clone_FieldIndex.ClonePath:
                    this.ClonePath = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Nickname != null) return true;
            if (ClonePath != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Clone_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Nickname => {Nickname}");
            fg.AppendLine($"ClonePath => {ClonePath}");
        }
        #endregion

        #region Combine
        public Clone_ErrorMask Combine(Clone_ErrorMask rhs)
        {
            var ret = new Clone_ErrorMask();
            ret.Nickname = this.Nickname.Combine(rhs.Nickname);
            ret.ClonePath = this.ClonePath.Combine(rhs.ClonePath);
            return ret;
        }
        public static Clone_ErrorMask Combine(Clone_ErrorMask lhs, Clone_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Clone_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Clone_ErrorMask();
        }
        #endregion

    }
    public class Clone_CopyMask
    {
        public Clone_CopyMask()
        {
        }

        public Clone_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Nickname = defaultOn;
            this.ClonePath = defaultOn;
        }

        #region Members
        public bool Nickname;
        public bool ClonePath;
        #endregion

    }

    public class Clone_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Nickname;
        public bool ClonePath;
        #endregion

        #region Ctors
        public Clone_TranslationMask()
        {
        }

        public Clone_TranslationMask(bool defaultOn)
        {
            this.Nickname = defaultOn;
            this.ClonePath = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Nickname, null));
            ret.Add((ClonePath, null));
        }
    }
    #endregion

    #endregion

}
