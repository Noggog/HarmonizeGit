/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using HarmonizeGit.GUI.Internals;
using ReactiveUI;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace HarmonizeGit.GUI
{
    #region Class
    public partial class Settings :
        LoquiNotifyingObject,
        ISettingsInternal,
        ILoquiObjectSetter<Settings>,
        IEquatable<Settings>,
        IEqualsMask
    {
        #region Ctor
        public Settings()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Repositories
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceList<Repository> _Repositories = new SourceList<Repository>();
        public ISourceList<Repository> Repositories => _Repositories;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<Repository> ISettings.Repositories => _Repositories;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRepositoryInternalGetter> ISettingsGetter.Repositories => _Repositories;
        #endregion

        #endregion
        #region LastReferencedDirectory
        private String _LastReferencedDirectory;
        public String LastReferencedDirectory
        {
            get => this._LastReferencedDirectory;
            set => this.RaiseAndSetIfReferenceChanged(ref this._LastReferencedDirectory, value, nameof(LastReferencedDirectory));
        }
        #endregion
        #region AutoSync
        private Boolean _AutoSync;
        public Boolean AutoSync
        {
            get => this._AutoSync;
            set => this.RaiseAndSetIfChanged(ref this._AutoSync, value, nameof(AutoSync));
        }
        #endregion
        #region PauseSeconds
        private Int32 _PauseSeconds = _PauseSeconds_Default;
        public readonly static Int32 _PauseSeconds_Default = 30;
        public Int32 PauseSeconds
        {
            get => this._PauseSeconds;
            set => this.RaiseAndSetIfChanged(ref this._PauseSeconds, value.PutInRange(PauseSeconds_Range.Min, PauseSeconds_Range.Max), nameof(PauseSeconds));
        }
        public static RangeInt32 PauseSeconds_Range = new RangeInt32(0, int.MaxValue);
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISettingsInternalGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            SettingsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ISettingsInternalGetter rhs)) return false;
            return ((SettingsCommon)((ISettingsInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(Settings obj)
        {
            return ((SettingsCommon)((ISettingsInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((SettingsCommon)((ISettingsInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => SettingsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((SettingsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Settings CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Settings_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Settings CreateFromXml(
            XElement node,
            out Settings_ErrorMask errorMask,
            bool doMasks = true,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Settings CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Settings() : null;
                    break;
                default:
                    break;
            }
            var ret = new Settings();
            try
            {
                foreach (var elem in node.Elements())
                {
                    SettingsXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Settings CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Settings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Settings CreateFromXml(
            string path,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Settings CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Settings CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Settings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Settings CreateFromXml(
            Stream stream,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Settings CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<Settings>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Settings_FieldIndex)index)
            {
                case Settings_FieldIndex.Repositories:
                case Settings_FieldIndex.LastReferencedDirectory:
                case Settings_FieldIndex.AutoSync:
                case Settings_FieldIndex.PauseSeconds:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Settings Copy(
            Settings_CopyMask copyMask = null,
            Settings def = null)
        {
            return Settings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Settings Copy(
            Settings item,
            Settings_CopyMask copyMask = null,
            Settings def = null)
        {
            Settings ret;
            if (item.GetType().Equals(typeof(Settings)))
            {
                ret = new Settings();
            }
            else
            {
                ret = (Settings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Settings Copy_ToLoqui(
            Settings item,
            Settings_CopyMask copyMask = null,
            Settings def = null)
        {
            Settings ret;
            if (item.GetType().Equals(typeof(Settings)))
            {
                ret = new Settings() as Settings;
            }
            else
            {
                ret = (Settings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(Settings rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Settings rhs,
            Settings_CopyMask copyMask,
            Settings def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Settings rhs,
            out Settings_ErrorMask errorMask,
            Settings_CopyMask copyMask = null,
            Settings def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SettingsSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Settings rhs,
            ErrorMaskBuilder errorMask,
            Settings_CopyMask copyMask = null,
            Settings def = null)
        {
            SettingsSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    this._Repositories.SetTo((IList<Repository>)obj);
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    this.LastReferencedDirectory = (String)obj;
                    break;
                case Settings_FieldIndex.AutoSync:
                    this.AutoSync = (Boolean)obj;
                    break;
                case Settings_FieldIndex.PauseSeconds:
                    this.PauseSeconds = (Int32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            SettingsSetterCommon.Instance.Clear(this);
        }

        public static Settings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Settings();
            foreach (var pair in fields)
            {
                CopyInInternal_Settings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Settings(Settings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Settings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    obj._Repositories.SetTo((IList<Repository>)pair.Value);
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    obj.LastReferencedDirectory = (String)pair.Value;
                    break;
                case Settings_FieldIndex.AutoSync:
                    obj.AutoSync = (Boolean)pair.Value;
                    break;
                case Settings_FieldIndex.PauseSeconds:
                    obj.PauseSeconds = (Int32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISettings :
        ISettingsInternalGetter,
        ILoquiObjectSetter<ISettingsInternal>
    {
        new IList<Repository> Repositories { get; }
        new String LastReferencedDirectory { get; set; }

        new Boolean AutoSync { get; set; }

        new Int32 PauseSeconds { get; set; }

        void CopyFieldsFrom(
            Settings rhs,
            ErrorMaskBuilder errorMask = null,
            Settings_CopyMask copyMask = null,
            Settings def = null);
    }

    public partial interface ISettingsInternal :
        ISettings,
        ISettingsInternalGetter
    {
    }

    public partial interface ISettingsGetter :
        ILoquiObject,
        ILoquiObject<ISettingsInternalGetter>,
        IXmlItem
    {
        #region Repositories
        IReadOnlyList<IRepositoryInternalGetter> Repositories { get; }
        #endregion
        #region LastReferencedDirectory
        String LastReferencedDirectory { get; }

        #endregion
        #region AutoSync
        Boolean AutoSync { get; }

        #endregion
        #region PauseSeconds
        Int32 PauseSeconds { get; }

        #endregion

    }

    public partial interface ISettingsInternalGetter : ISettingsGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class SettingsMixIn
    {
        public static void Clear(this ISettingsInternal item)
        {
            ((SettingsSetterCommon)((ISettingsInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static Settings_Mask<bool> GetEqualsMask(
            this ISettingsInternalGetter item,
            ISettingsInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISettingsInternalGetter item,
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            return ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISettingsInternalGetter item,
            FileGeneration fg,
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISettingsInternalGetter item,
            Settings_Mask<bool?> checkMask)
        {
            return ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Settings_Mask<bool> GetHasBeenSetMask(this ISettingsInternalGetter item)
        {
            var ret = new Settings_Mask<bool>();
            ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISettingsInternalGetter item,
            ISettingsInternalGetter rhs)
        {
            return ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace HarmonizeGit.GUI.Internals
{
    #region Field Index
    public enum Settings_FieldIndex
    {
        Repositories = 0,
        LastReferencedDirectory = 1,
        AutoSync = 2,
        PauseSeconds = 3,
    }
    #endregion

    #region Registration
    public class Settings_Registration : ILoquiRegistration
    {
        public static readonly Settings_Registration Instance = new Settings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_HarmonizeGit.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_HarmonizeGit.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "5d6eeb31-060e-48ce-b224-2b4c2b802cde";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Settings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Settings_ErrorMask);

        public static readonly Type ClassType = typeof(Settings);

        public static readonly Type GetterType = typeof(ISettingsGetter);

        public static readonly Type InternalGetterType = typeof(ISettingsInternalGetter);

        public static readonly Type SetterType = typeof(ISettings);

        public static readonly Type InternalSetterType = typeof(ISettingsInternal);

        public const string FullName = "HarmonizeGit.GUI.Settings";

        public const string Name = "Settings";

        public const string Namespace = "HarmonizeGit.GUI";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REPOSITORIES":
                    return (ushort)Settings_FieldIndex.Repositories;
                case "LASTREFERENCEDDIRECTORY":
                    return (ushort)Settings_FieldIndex.LastReferencedDirectory;
                case "AUTOSYNC":
                    return (ushort)Settings_FieldIndex.AutoSync;
                case "PAUSESECONDS":
                    return (ushort)Settings_FieldIndex.PauseSeconds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    return true;
                case Settings_FieldIndex.LastReferencedDirectory:
                case Settings_FieldIndex.AutoSync:
                case Settings_FieldIndex.PauseSeconds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    return true;
                case Settings_FieldIndex.LastReferencedDirectory:
                case Settings_FieldIndex.AutoSync:
                case Settings_FieldIndex.PauseSeconds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                case Settings_FieldIndex.LastReferencedDirectory:
                case Settings_FieldIndex.AutoSync:
                case Settings_FieldIndex.PauseSeconds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    return "Repositories";
                case Settings_FieldIndex.LastReferencedDirectory:
                    return "LastReferencedDirectory";
                case Settings_FieldIndex.AutoSync:
                    return "AutoSync";
                case Settings_FieldIndex.PauseSeconds:
                    return "PauseSeconds";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                case Settings_FieldIndex.LastReferencedDirectory:
                case Settings_FieldIndex.AutoSync:
                case Settings_FieldIndex.PauseSeconds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                case Settings_FieldIndex.LastReferencedDirectory:
                case Settings_FieldIndex.AutoSync:
                case Settings_FieldIndex.PauseSeconds:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    return typeof(IList<Repository>);
                case Settings_FieldIndex.LastReferencedDirectory:
                    return typeof(String);
                case Settings_FieldIndex.AutoSync:
                    return typeof(Boolean);
                case Settings_FieldIndex.PauseSeconds:
                    return typeof(Int32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SettingsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SettingsSetterCommon
    {
        public static readonly SettingsSetterCommon Instance = new SettingsSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ISettingsInternal item)
        {
            ClearPartial();
            item.Repositories.Clear();
            item.LastReferencedDirectory = default(String);
            item.AutoSync = default(Boolean);
            item.PauseSeconds = Settings._PauseSeconds_Default;
        }
        
        
    }
    public partial class SettingsCommon
    {
        public static readonly SettingsCommon Instance = new SettingsCommon();

        public Settings_Mask<bool> GetEqualsMask(
            ISettingsInternalGetter item,
            ISettingsInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Settings_Mask<bool>();
            ((SettingsCommon)((ISettingsInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISettingsInternalGetter item,
            ISettingsInternalGetter rhs,
            Settings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Repositories = item.Repositories.CollectionEqualsHelper(
                rhs.Repositories,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LastReferencedDirectory = string.Equals(item.LastReferencedDirectory, rhs.LastReferencedDirectory);
            ret.AutoSync = item.AutoSync == rhs.AutoSync;
            ret.PauseSeconds = item.PauseSeconds == rhs.PauseSeconds;
        }
        
        public string ToString(
            ISettingsInternalGetter item,
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISettingsInternalGetter item,
            FileGeneration fg,
            string name = null,
            Settings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Settings =>");
            }
            else
            {
                fg.AppendLine($"{name} (Settings) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISettingsInternalGetter item,
            FileGeneration fg,
            Settings_Mask<bool> printMask = null)
        {
            if (printMask?.Repositories?.Overall ?? true)
            {
                fg.AppendLine("Repositories =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Repositories)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LastReferencedDirectory ?? true)
            {
                fg.AppendLine($"LastReferencedDirectory => {item.LastReferencedDirectory}");
            }
            if (printMask?.AutoSync ?? true)
            {
                fg.AppendLine($"AutoSync => {item.AutoSync}");
            }
            if (printMask?.PauseSeconds ?? true)
            {
                fg.AppendLine($"PauseSeconds => {item.PauseSeconds}");
            }
        }
        
        public bool HasBeenSet(
            ISettingsInternalGetter item,
            Settings_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISettingsInternalGetter item,
            Settings_Mask<bool> mask)
        {
            mask.Repositories = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Repository_Mask<bool>>>>(true, item.Repositories.WithIndex().Select((i) => new MaskItemIndexed<bool, Repository_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.LastReferencedDirectory = true;
            mask.AutoSync = true;
            mask.PauseSeconds = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISettingsInternalGetter lhs,
            ISettingsInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Repositories.SequenceEqual(rhs.Repositories)) return false;
            if (!string.Equals(lhs.LastReferencedDirectory, rhs.LastReferencedDirectory)) return false;
            if (lhs.AutoSync != rhs.AutoSync) return false;
            if (lhs.PauseSeconds != rhs.PauseSeconds) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISettingsInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Repositories).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LastReferencedDirectory).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AutoSync).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PauseSeconds).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        
    }
    public partial class SettingsSetterCopyCommon
    {
        public static readonly SettingsSetterCopyCommon Instance = new SettingsSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Settings item,
            Settings rhs,
            Settings def,
            ErrorMaskBuilder errorMask,
            Settings_CopyMask copyMask)
        {
            if (copyMask?.Repositories.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Settings_FieldIndex.Repositories);
                try
                {
                    item.Repositories.SetToWithDefault<Repository, Repository>(
                        rhs: rhs.Repositories,
                        def: def?.Repositories,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Repositories.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Repository)r;
                                case CopyOption.MakeCopy:
                                    return Repository.Copy(
                                        r,
                                        copyMask?.Repositories?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Repositories.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LastReferencedDirectory ?? true)
            {
                errorMask?.PushIndex((int)Settings_FieldIndex.LastReferencedDirectory);
                try
                {
                    item.LastReferencedDirectory = rhs.LastReferencedDirectory;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.AutoSync ?? true)
            {
                errorMask?.PushIndex((int)Settings_FieldIndex.AutoSync);
                try
                {
                    item.AutoSync = rhs.AutoSync;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.PauseSeconds ?? true)
            {
                errorMask?.PushIndex((int)Settings_FieldIndex.PauseSeconds);
                try
                {
                    item.PauseSeconds = rhs.PauseSeconds;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        
    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SettingsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SettingsXmlWriteTranslation Instance = new SettingsXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISettingsInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.Repositories) ?? true))
            {
                ListXmlTranslation<IRepositoryInternalGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Repositories),
                    item: item.Repositories,
                    fieldIndex: (int)Settings_FieldIndex.Repositories,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Settings_FieldIndex.Repositories),
                    transl: (XElement subNode, IRepositoryInternalGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((RepositoryXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.LastReferencedDirectory) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastReferencedDirectory),
                    item: item.LastReferencedDirectory,
                    fieldIndex: (int)Settings_FieldIndex.LastReferencedDirectory,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.AutoSync) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AutoSync),
                    item: item.AutoSync,
                    fieldIndex: (int)Settings_FieldIndex.AutoSync,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.PauseSeconds) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PauseSeconds),
                    item: item.PauseSeconds,
                    fieldIndex: (int)Settings_FieldIndex.PauseSeconds,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISettingsInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "HarmonizeGit.GUI.Settings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "HarmonizeGit.GUI.Settings");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISettingsInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISettingsInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ISettingsInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SettingsXmlCreateTranslation
    {
        public readonly static SettingsXmlCreateTranslation Instance = new SettingsXmlCreateTranslation();

        public static void FillPublicXml(
            ISettingsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISettingsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Repositories":
                    if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.Repositories) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Settings_FieldIndex.Repositories);
                            if (ListXmlTranslation<Repository>.Instance.Parse(
                                node: node,
                                enumer: out var RepositoriesItem,
                                transl: LoquiXmlTranslation<Repository>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.Repositories.SetTo(RepositoriesItem);
                            }
                            else
                            {
                                item.Repositories.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "LastReferencedDirectory":
                    if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.LastReferencedDirectory) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Settings_FieldIndex.LastReferencedDirectory);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String LastReferencedDirectoryParse,
                                errorMask: errorMask))
                            {
                                item.LastReferencedDirectory = LastReferencedDirectoryParse;
                            }
                            else
                            {
                                item.LastReferencedDirectory = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "AutoSync":
                    if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.AutoSync) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Settings_FieldIndex.AutoSync);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean AutoSyncParse,
                                errorMask: errorMask))
                            {
                                item.AutoSync = AutoSyncParse;
                            }
                            else
                            {
                                item.AutoSync = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "PauseSeconds":
                    if ((translationMask?.GetShouldTranslate((int)Settings_FieldIndex.PauseSeconds) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Settings_FieldIndex.PauseSeconds);
                            if (Int32XmlTranslation.Instance.Parse(
                                node: node,
                                item: out Int32 PauseSecondsParse,
                                errorMask: errorMask))
                            {
                                item.PauseSeconds = PauseSecondsParse;
                            }
                            else
                            {
                                item.PauseSeconds = default(Int32);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class SettingsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISettingsInternalGetter item,
            XElement node,
            out Settings_ErrorMask errorMask,
            bool doMasks = true,
            Settings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Settings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            string path,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            Stream stream,
            out Settings_ErrorMask errorMask,
            Settings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((SettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            XElement node,
            string name = null,
            Settings_TranslationMask translationMask = null)
        {
            ((SettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISettingsInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Settings_Mask<T> : IMask<T>, IEquatable<Settings_Mask<T>>
    {
        #region Ctors
        public Settings_Mask()
        {
        }

        public Settings_Mask(T initialValue)
        {
            this.Repositories = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Repository_Mask<T>>>>(initialValue, null);
            this.LastReferencedDirectory = initialValue;
            this.AutoSync = initialValue;
            this.PauseSeconds = initialValue;
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Repository_Mask<T>>>> Repositories;
        public T LastReferencedDirectory;
        public T AutoSync;
        public T PauseSeconds;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Settings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Settings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Repositories, rhs.Repositories)) return false;
            if (!object.Equals(this.LastReferencedDirectory, rhs.LastReferencedDirectory)) return false;
            if (!object.Equals(this.AutoSync, rhs.AutoSync)) return false;
            if (!object.Equals(this.PauseSeconds, rhs.PauseSeconds)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Repositories?.GetHashCode());
            ret = ret.CombineHashCode(this.LastReferencedDirectory?.GetHashCode());
            ret = ret.CombineHashCode(this.AutoSync?.GetHashCode());
            ret = ret.CombineHashCode(this.PauseSeconds?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (this.Repositories != null)
            {
                if (!eval(this.Repositories.Overall)) return false;
                if (this.Repositories.Specific != null)
                {
                    foreach (var item in this.Repositories.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (!eval(this.LastReferencedDirectory)) return false;
            if (!eval(this.AutoSync)) return false;
            if (!eval(this.PauseSeconds)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Settings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Settings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Settings_Mask<R> obj, Func<T, R> eval)
        {
            if (Repositories != null)
            {
                obj.Repositories = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Repository_Mask<R>>>>();
                obj.Repositories.Overall = eval(this.Repositories.Overall);
                if (Repositories.Specific != null)
                {
                    List<MaskItemIndexed<R, Repository_Mask<R>>> l = new List<MaskItemIndexed<R, Repository_Mask<R>>>();
                    obj.Repositories.Specific = l;
                    foreach (var item in Repositories.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Repository_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Repository_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            obj.LastReferencedDirectory = eval(this.LastReferencedDirectory);
            obj.AutoSync = eval(this.AutoSync);
            obj.PauseSeconds = eval(this.PauseSeconds);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Repositories.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Settings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Settings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Settings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Repositories?.Overall ?? true)
                {
                    fg.AppendLine("Repositories =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Repositories.Overall != null)
                        {
                            fg.AppendLine(Repositories.Overall.ToString());
                        }
                        if (Repositories.Specific != null)
                        {
                            foreach (var subItem in Repositories.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.LastReferencedDirectory ?? true)
                {
                    fg.AppendLine($"LastReferencedDirectory => {LastReferencedDirectory}");
                }
                if (printMask?.AutoSync ?? true)
                {
                    fg.AppendLine($"AutoSync => {AutoSync}");
                }
                if (printMask?.PauseSeconds ?? true)
                {
                    fg.AppendLine($"PauseSeconds => {PauseSeconds}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Settings_ErrorMask : IErrorMask, IErrorMask<Settings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Repository_ErrorMask>>> Repositories;
        public Exception LastReferencedDirectory;
        public Exception AutoSync;
        public Exception PauseSeconds;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    return Repositories;
                case Settings_FieldIndex.LastReferencedDirectory:
                    return LastReferencedDirectory;
                case Settings_FieldIndex.AutoSync:
                    return AutoSync;
                case Settings_FieldIndex.PauseSeconds:
                    return PauseSeconds;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    this.Repositories = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Repository_ErrorMask>>>(ex, null);
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    this.LastReferencedDirectory = ex;
                    break;
                case Settings_FieldIndex.AutoSync:
                    this.AutoSync = ex;
                    break;
                case Settings_FieldIndex.PauseSeconds:
                    this.PauseSeconds = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Settings_FieldIndex enu = (Settings_FieldIndex)index;
            switch (enu)
            {
                case Settings_FieldIndex.Repositories:
                    this.Repositories = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Repository_ErrorMask>>>)obj;
                    break;
                case Settings_FieldIndex.LastReferencedDirectory:
                    this.LastReferencedDirectory = (Exception)obj;
                    break;
                case Settings_FieldIndex.AutoSync:
                    this.AutoSync = (Exception)obj;
                    break;
                case Settings_FieldIndex.PauseSeconds:
                    this.PauseSeconds = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Repositories != null) return true;
            if (LastReferencedDirectory != null) return true;
            if (AutoSync != null) return true;
            if (PauseSeconds != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Settings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine("Repositories =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Repositories.Overall != null)
                {
                    fg.AppendLine(Repositories.Overall.ToString());
                }
                if (Repositories.Specific != null)
                {
                    foreach (var subItem in Repositories.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine($"LastReferencedDirectory => {LastReferencedDirectory}");
            fg.AppendLine($"AutoSync => {AutoSync}");
            fg.AppendLine($"PauseSeconds => {PauseSeconds}");
        }
        #endregion

        #region Combine
        public Settings_ErrorMask Combine(Settings_ErrorMask rhs)
        {
            var ret = new Settings_ErrorMask();
            ret.Repositories = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Repository_ErrorMask>>>(this.Repositories.Overall.Combine(rhs.Repositories.Overall), new List<MaskItem<Exception, Repository_ErrorMask>>(this.Repositories.Specific.And(rhs.Repositories.Specific)));
            ret.LastReferencedDirectory = this.LastReferencedDirectory.Combine(rhs.LastReferencedDirectory);
            ret.AutoSync = this.AutoSync.Combine(rhs.AutoSync);
            ret.PauseSeconds = this.PauseSeconds.Combine(rhs.PauseSeconds);
            return ret;
        }
        public static Settings_ErrorMask Combine(Settings_ErrorMask lhs, Settings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Settings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Settings_ErrorMask();
        }
        #endregion

    }
    public class Settings_CopyMask
    {
        public Settings_CopyMask()
        {
        }

        public Settings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Repositories = new MaskItem<CopyOption, Repository_CopyMask>(deepCopyOption, default);
            this.LastReferencedDirectory = defaultOn;
            this.AutoSync = defaultOn;
            this.PauseSeconds = defaultOn;
        }

        #region Members
        public MaskItem<CopyOption, Repository_CopyMask> Repositories;
        public bool LastReferencedDirectory;
        public bool AutoSync;
        public bool PauseSeconds;
        #endregion

    }

    public class Settings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, Repository_TranslationMask> Repositories;
        public bool LastReferencedDirectory;
        public bool AutoSync;
        public bool PauseSeconds;
        #endregion

        #region Ctors
        public Settings_TranslationMask()
        {
        }

        public Settings_TranslationMask(bool defaultOn)
        {
            this.Repositories = new MaskItem<bool, Repository_TranslationMask>(defaultOn, null);
            this.LastReferencedDirectory = defaultOn;
            this.AutoSync = defaultOn;
            this.PauseSeconds = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Repositories?.Overall ?? true, Repositories?.Specific?.GetCrystal()));
            ret.Add((LastReferencedDirectory, null));
            ret.Add((AutoSync, null));
            ret.Add((PauseSeconds, null));
        }
    }
    #endregion

    #endregion

}

namespace HarmonizeGit.GUI
{
    public partial class Settings
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Settings_Registration.Instance;
        public static Settings_Registration Registration => Settings_Registration.Instance;
        protected object CommonInstance()
        {
            return SettingsCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return SettingsSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return SettingsSetterCopyCommon.Instance;
        }
        object ISettingsInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object ISettingsInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object ISettingsInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
