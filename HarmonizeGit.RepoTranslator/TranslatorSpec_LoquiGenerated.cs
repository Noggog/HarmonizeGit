/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using HarmonizeGit.RepoTranslator.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace HarmonizeGit.RepoTranslator
{
    #region Class
    public partial class TranslatorSpec : ITranslatorSpec, ILoquiObjectSetter, IEquatable<TranslatorSpec>
    {
        ILoquiRegistration ILoquiObject.Registration => TranslatorSpec_Registration.Instance;
        public static TranslatorSpec_Registration Registration => TranslatorSpec_Registration.Instance;

        #region Ctor
        public TranslatorSpec()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        public TranslationType Type { get; set; }
        #endregion
        #region ExportFolder 
        public DirectoryPath ExportFolder  { get; set; }
        #endregion
        #region TargetRepos
        private readonly INotifyingList<DirectoryPath> _TargetRepos = new NotifyingList<DirectoryPath>();
        public INotifyingList<DirectoryPath> TargetRepos => _TargetRepos;
        #region Interface Members
        INotifyingList<DirectoryPath> ITranslatorSpec.TargetRepos => _TargetRepos;
        INotifyingListGetter<DirectoryPath> ITranslatorSpecGetter.TargetRepos => _TargetRepos;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TranslatorSpecCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TranslatorSpecCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TranslatorSpecCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TranslatorSpecCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TranslatorSpecCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TranslatorSpec_Mask<bool> printMask = null)
        {
            return TranslatorSpecCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TranslatorSpecCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TranslatorSpec_Mask<bool> GetHasBeenSetMask()
        {
            return TranslatorSpecCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TranslatorSpec rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TranslatorSpec rhs)
        {
            if (rhs == null) return false;
            if (Type != rhs.Type) return false;
            if (!object.Equals(ExportFolder , rhs.ExportFolder )) return false;
            if (!TargetRepos.SequenceEqual(rhs.TargetRepos)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ExportFolder ).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TargetRepos).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        public static TranslatorSpec Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TranslatorSpec Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TranslatorSpec Create_XML(
            XElement root,
            out TranslatorSpec_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TranslatorSpec Create_XML(string path)
        {
            return Create_XML(
                root: XDocument.Load(path).Root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TranslatorSpec Create_XML(
            string path,
            out TranslatorSpec_ErrorMask errorMask)
        {
            return Create_XML(
                root: XDocument.Load(path).Root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TranslatorSpec Create_XML(
            XElement root,
            bool doMasks,
            out TranslatorSpec_ErrorMask errorMask)
        {
            TranslatorSpec_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TranslatorSpec_ErrorMask()) : default(Func<TranslatorSpec_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        private static TranslatorSpec Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<TranslatorSpec_ErrorMask> errorMask)
        {
            var ret = new TranslatorSpec();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TranslatorSpec item,
            XElement root,
            string name,
            bool doMasks,
            Func<TranslatorSpec_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Type":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<TranslationType>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Type = tryGet.Value.Value;
                        }
                        if (doMasks && subMask != null)
                        {
                            errorMask().Type = subMask;
                        }
                    }
                    break;
                case "ExportFolder ":
                    {
                        Exception subMask;
                        var tryGet = DirectoryPathXmlTranslation.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.ExportFolder  = tryGet.Value.Value;
                        }
                        if (doMasks && subMask != null)
                        {
                            errorMask().ExportFolder  = subMask;
                        }
                    }
                    break;
                case "TargetRepos":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<DirectoryPath, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return DirectoryPathXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        if (listTryGet.Succeeded)
                        {
                            item._TargetRepos.SetTo(listTryGet.Value);
                        }
                        if (doMasks && subMask != null)
                        {
                            errorMask().TargetRepos = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TranslatorSpec, TranslatorSpec_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TranslatorSpec_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out TranslatorSpec_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TranslatorSpec, TranslatorSpec_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TranslatorSpec, TranslatorSpec_ErrorMask>.Instance.CopyIn(
                root: XDocument.Load(path).Root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TranslatorSpec_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            string path,
            out TranslatorSpec_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TranslatorSpec, TranslatorSpec_ErrorMask>.Instance.CopyIn(
                root: XDocument.Load(path).Root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            TranslatorSpecCommon.Write_XML(
                this,
                stream);
        }

        public void Write_XML(string path)
        {
            TranslatorSpecCommon.Write_XML(
                this,
                path);
        }

        public void Write_XML(Stream stream, out TranslatorSpec_ErrorMask errorMask)
        {
            TranslatorSpecCommon.Write_XML(
                this,
                stream,
                out errorMask);
        }

        public void Write_XML(string path, out TranslatorSpec_ErrorMask errorMask)
        {
            TranslatorSpecCommon.Write_XML(
                this,
                path,
                out errorMask);
        }

        public void Write_XML(XmlWriter writer, out TranslatorSpec_ErrorMask errorMask, string name = null)
        {
            TranslatorSpecCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name = null)
        {
            TranslatorSpecCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TranslatorSpec_ErrorMask errorMask);
        }

        #endregion

        public TranslatorSpec Copy(
            TranslatorSpec_CopyMask copyMask = null,
            ITranslatorSpecGetter def = null)
        {
            return TranslatorSpec.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TranslatorSpec Copy(
            ITranslatorSpec item,
            TranslatorSpec_CopyMask copyMask = null,
            ITranslatorSpecGetter def = null)
        {
            TranslatorSpec ret;
            if (item.GetType().Equals(typeof(TranslatorSpec)))
            {
                ret = new TranslatorSpec();
            }
            else
            {
                ret = (TranslatorSpec)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            TranslatorSpec_CopyMask copyMask = null,
            ITranslatorSpecGetter def = null)
            where CopyType : class, ITranslatorSpec
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TranslatorSpec)))
            {
                ret = new TranslatorSpec() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TranslatorSpec Copy_ToLoqui(
            ITranslatorSpecGetter item,
            TranslatorSpec_CopyMask copyMask = null,
            ITranslatorSpecGetter def = null)
        {
            var ret = new TranslatorSpec();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    this.Type = (TranslationType)obj;
                    break;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    this.ExportFolder  = (DirectoryPath)obj;
                    break;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    this._TargetRepos.SetTo((IEnumerable<DirectoryPath>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TranslatorSpecCommon.Clear(this, cmds);
        }


        public static TranslatorSpec Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TranslatorSpec();
            foreach (var pair in fields)
            {
                CopyInInternal_TranslatorSpec(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TranslatorSpec(TranslatorSpec obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TranslatorSpec_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    obj.Type = (TranslationType)pair.Value;
                    break;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    obj.ExportFolder  = (DirectoryPath)pair.Value;
                    break;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    obj._TargetRepos.SetTo((IEnumerable<DirectoryPath>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TranslatorSpec obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITranslatorSpec : ITranslatorSpecGetter, ILoquiClass<ITranslatorSpec, ITranslatorSpecGetter>, ILoquiClass<TranslatorSpec, ITranslatorSpecGetter>
    {
        new TranslationType Type { get; set; }

        new DirectoryPath ExportFolder  { get; set; }

        new INotifyingList<DirectoryPath> TargetRepos { get; }
    }

    public interface ITranslatorSpecGetter : ILoquiObject
    {
        #region Type
        TranslationType Type { get; }

        #endregion
        #region ExportFolder 
        DirectoryPath ExportFolder  { get; }

        #endregion
        #region TargetRepos
        INotifyingListGetter<DirectoryPath> TargetRepos { get; }
        #endregion

    }

    #endregion

}

namespace HarmonizeGit.RepoTranslator.Internals
{
    #region Field Index
    public enum TranslatorSpec_FieldIndex
    {
        Type = 0,
        ExportFolder  = 1,
        TargetRepos = 2,
    }
    #endregion

    #region Registration
    public class TranslatorSpec_Registration : ILoquiRegistration
    {
        public static readonly TranslatorSpec_Registration Instance = new TranslatorSpec_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_HarmonizeGitRepoTranslator.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_HarmonizeGitRepoTranslator.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "d5c73cf3-5ff8-4259-8dad-7cf9bb10083f";

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(TranslatorSpec_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TranslatorSpec_ErrorMask);

        public static readonly Type ClassType = typeof(TranslatorSpec);

        public static readonly Type GetterType = typeof(ITranslatorSpecGetter);

        public static readonly Type SetterType = typeof(ITranslatorSpec);

        public static readonly Type CommonType = typeof(TranslatorSpecCommon);

        public const string FullName = "HarmonizeGit.RepoTranslator.TranslatorSpec";

        public const string Name = "TranslatorSpec";

        public const string Namespace = "HarmonizeGit.RepoTranslator";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TYPE":
                    return (ushort)TranslatorSpec_FieldIndex.Type;
                case "EXPORTFOLDER ":
                    return (ushort)TranslatorSpec_FieldIndex.ExportFolder ;
                case "TARGETREPOS":
                    return (ushort)TranslatorSpec_FieldIndex.TargetRepos;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return true;
                case TranslatorSpec_FieldIndex.Type:
                case TranslatorSpec_FieldIndex.ExportFolder :
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                case TranslatorSpec_FieldIndex.ExportFolder :
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                case TranslatorSpec_FieldIndex.ExportFolder :
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    return "Type";
                case TranslatorSpec_FieldIndex.ExportFolder :
                    return "ExportFolder ";
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return "TargetRepos";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                case TranslatorSpec_FieldIndex.ExportFolder :
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                case TranslatorSpec_FieldIndex.ExportFolder :
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    return typeof(TranslationType);
                case TranslatorSpec_FieldIndex.ExportFolder :
                    return typeof(DirectoryPath);
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return typeof(NotifyingList<DirectoryPath>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TranslatorSpecCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITranslatorSpec item,
            ITranslatorSpecGetter rhs,
            TranslatorSpec_CopyMask copyMask = null,
            ITranslatorSpecGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TranslatorSpecCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITranslatorSpec item,
            ITranslatorSpecGetter rhs,
            out TranslatorSpec_ErrorMask errorMask,
            TranslatorSpec_CopyMask copyMask = null,
            ITranslatorSpecGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TranslatorSpecCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITranslatorSpec item,
            ITranslatorSpecGetter rhs,
            ITranslatorSpecGetter def,
            bool doErrorMask,
            out TranslatorSpec_ErrorMask errorMask,
            TranslatorSpec_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TranslatorSpec_ErrorMask retErrorMask = null;
            Func<TranslatorSpec_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TranslatorSpec_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITranslatorSpec item,
            ITranslatorSpecGetter rhs,
            ITranslatorSpecGetter def,
            bool doErrorMask,
            Func<TranslatorSpec_ErrorMask> errorMask,
            TranslatorSpec_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.Type ?? true)
            {
                item.Type = rhs.Type;
            }
            if (copyMask?.ExportFolder  ?? true)
            {
                item.ExportFolder  = rhs.ExportFolder ;
            }
            if (copyMask?.TargetRepos != CopyOption.Skip)
            {
                try
                {
                    item.TargetRepos.SetToWithDefault(
                        rhs.TargetRepos,
                        def?.TargetRepos,
                        cmds);
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((ushort)TranslatorSpec_FieldIndex.TargetRepos, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITranslatorSpec obj,
            NotifyingFireParameters? cmds = null)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    break;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    break;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    obj.TargetRepos.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITranslatorSpec obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    obj.Type = default(TranslationType);
                    break;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    obj.ExportFolder  = default(DirectoryPath);
                    break;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    obj.TargetRepos.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITranslatorSpec obj)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                case TranslatorSpec_FieldIndex.ExportFolder :
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITranslatorSpecGetter obj)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    return obj.Type;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    return obj.ExportFolder ;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    return obj.TargetRepos;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITranslatorSpec item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.Type = default(TranslationType);
            item.ExportFolder  = default(DirectoryPath);
            item.TargetRepos.Unset(cmds.ToUnsetParams());
        }

        public static TranslatorSpec_Mask<bool> GetEqualsMask(
            this ITranslatorSpecGetter item,
            ITranslatorSpecGetter rhs)
        {
            var ret = new TranslatorSpec_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITranslatorSpecGetter item,
            ITranslatorSpecGetter rhs,
            TranslatorSpec_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Type = item.Type == rhs.Type;
            ret.ExportFolder  = object.Equals(item.ExportFolder , rhs.ExportFolder );
            ret.TargetRepos = new MaskItem<bool, IEnumerable<bool>>();
            ret.TargetRepos.Specific = item.TargetRepos.SelectAgainst<DirectoryPath, bool>(rhs.TargetRepos, ((l, r) => object.Equals(l, r)), out ret.TargetRepos.Overall);
            ret.TargetRepos.Overall = ret.TargetRepos.Overall && ret.TargetRepos.Specific.All((b) => b);
        }

        public static string ToString(
            this ITranslatorSpecGetter item,
            string name = null,
            TranslatorSpec_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITranslatorSpecGetter item,
            FileGeneration fg,
            string name = null,
            TranslatorSpec_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TranslatorSpec)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TranslatorSpec)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {item.Type}");
                }
                if (printMask?.ExportFolder  ?? true)
                {
                    fg.AppendLine($"ExportFolder  => {item.ExportFolder }");
                }
                if (printMask?.TargetRepos?.Overall ?? true)
                {
                    fg.AppendLine("TargetRepos =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.TargetRepos)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITranslatorSpecGetter item,
            TranslatorSpec_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TranslatorSpec_Mask<bool> GetHasBeenSetMask(ITranslatorSpecGetter item)
        {
            var ret = new TranslatorSpec_Mask<bool>();
            ret.Type = true;
            ret.ExportFolder  = true;
            ret.TargetRepos = new MaskItem<bool, IEnumerable<bool>>(item.TargetRepos.HasBeenSet, null);
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            ITranslatorSpecGetter item,
            Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TranslatorSpec_ErrorMask errorMask);
            }
        }

        public static void Write_XML(
            ITranslatorSpecGetter item,
            Stream stream,
            out TranslatorSpec_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML(
            ITranslatorSpecGetter item,
            string path)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TranslatorSpec_ErrorMask errorMask);
            }
        }

        public static void Write_XML(
            ITranslatorSpecGetter item,
            string path,
            out TranslatorSpec_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML(
            XmlWriter writer,
            string name,
            ITranslatorSpecGetter item,
            bool doMasks,
            out TranslatorSpec_ErrorMask errorMask)
        {
            TranslatorSpec_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TranslatorSpec_ErrorMask()) : default(Func<TranslatorSpec_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            string name,
            ITranslatorSpecGetter item,
            bool doMasks,
            Func<TranslatorSpec_ErrorMask> errorMask)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "HarmonizeGit.RepoTranslator.TranslatorSpec"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "HarmonizeGit.RepoTranslator.TranslatorSpec");
                    }
                    {
                        Exception subMask;
                        EnumXmlTranslation<TranslationType>.Instance.Write(
                            writer,
                            nameof(item.Type),
                            item.Type,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Type = subMask;
                        }
                    }
                    {
                        Exception subMask;
                        DirectoryPathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ExportFolder ),
                            item.ExportFolder ,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ExportFolder  = subMask;
                        }
                    }
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<DirectoryPath, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.TargetRepos),
                            item: item.TargetRepos,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (DirectoryPath subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                DirectoryPathXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: doMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().TargetRepos = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TranslatorSpec_Mask<T> : IMask<T>, IEquatable<TranslatorSpec_Mask<T>>
    {
        #region Ctors
        public TranslatorSpec_Mask()
        {
        }

        public TranslatorSpec_Mask(T initialValue)
        {
            this.Type = initialValue;
            this.ExportFolder  = initialValue;
            this.TargetRepos = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Type;
        public T ExportFolder ;
        public MaskItem<T, IEnumerable<T>> TargetRepos;
        #endregion

        #region Equals
        public override bool Equals(object rhs)
        {
            if (rhs == null) return false;
            return Equals((TranslatorSpec_Mask<T>)rhs);
        }

        public bool Equals(TranslatorSpec_Mask<T> rhs)
        {
            if (!object.Equals(this.Type, rhs.Type)) return false;
            if (!object.Equals(this.ExportFolder , rhs.ExportFolder )) return false;
            if (!object.Equals(this.TargetRepos, rhs.TargetRepos)) return false;
            return true;
        }
        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Type)) return false;
            if (!eval(this.ExportFolder )) return false;
            if (TargetRepos != null)
            {
                if (!eval(this.TargetRepos.Overall)) return false;
                if (TargetRepos.Specific != null)
                {
                    foreach (var item in TargetRepos.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TranslatorSpec_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TranslatorSpec_Mask<R>();
            ret.Type = eval(this.Type);
            ret.ExportFolder  = eval(this.ExportFolder );
            if (TargetRepos != null)
            {
                ret.TargetRepos = new MaskItem<R, IEnumerable<R>>();
                ret.TargetRepos.Overall = eval(this.TargetRepos.Overall);
                if (TargetRepos.Specific != null)
                {
                    List<R> l = new List<R>();
                    ret.TargetRepos.Specific = l;
                    foreach (var item in TargetRepos.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            return ret;
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.TargetRepos.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TranslatorSpec_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TranslatorSpec_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TranslatorSpec_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Type ?? true)
                {
                    fg.AppendLine($"Type => {Type.ToStringSafe()}");
                }
                if (printMask?.ExportFolder  ?? true)
                {
                    fg.AppendLine($"ExportFolder  => {ExportFolder .ToStringSafe()}");
                }
                if (printMask?.TargetRepos?.Overall ?? true)
                {
                    fg.AppendLine("TargetRepos =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (TargetRepos.Overall != null)
                        {
                            fg.AppendLine(TargetRepos.Overall.ToString());
                        }
                        if (TargetRepos.Specific != null)
                        {
                            foreach (var subItem in TargetRepos.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TranslatorSpec_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Type;
        public Exception ExportFolder ;
        public MaskItem<Exception, IEnumerable<Exception>> TargetRepos;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    this.Type = ex;
                    break;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    this.ExportFolder  = ex;
                    break;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    this.TargetRepos = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TranslatorSpec_FieldIndex enu = (TranslatorSpec_FieldIndex)index;
            switch (enu)
            {
                case TranslatorSpec_FieldIndex.Type:
                    this.Type = (Exception)obj;
                    break;
                case TranslatorSpec_FieldIndex.ExportFolder :
                    this.ExportFolder  = (Exception)obj;
                    break;
                case TranslatorSpec_FieldIndex.TargetRepos:
                    this.TargetRepos = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TranslatorSpec_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Type != null)
                {
                    fg.AppendLine($"Type => {Type.ToStringSafe()}");
                }
                if (ExportFolder  != null)
                {
                    fg.AppendLine($"ExportFolder  => {ExportFolder .ToStringSafe()}");
                }
                if (TargetRepos != null)
                {
                    fg.AppendLine("TargetRepos =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (TargetRepos.Overall != null)
                        {
                            fg.AppendLine(TargetRepos.Overall.ToString());
                        }
                        if (TargetRepos.Specific != null)
                        {
                            foreach (var subItem in TargetRepos.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TranslatorSpec_ErrorMask Combine(TranslatorSpec_ErrorMask rhs)
        {
            var ret = new TranslatorSpec_ErrorMask();
            ret.Type = this.Type.Combine(rhs.Type);
            ret.ExportFolder  = this.ExportFolder .Combine(rhs.ExportFolder );
            ret.TargetRepos = new MaskItem<Exception, IEnumerable<Exception>>(this.TargetRepos.Overall.Combine(rhs.TargetRepos.Overall), new List<Exception>(this.TargetRepos.Specific.And(rhs.TargetRepos.Specific)));
            return ret;
        }
        public static TranslatorSpec_ErrorMask Combine(TranslatorSpec_ErrorMask lhs, TranslatorSpec_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TranslatorSpec_CopyMask
    {
        #region Members
        public bool Type;
        public bool ExportFolder ;
        public CopyOption TargetRepos;
        #endregion

    }
    #endregion


    #endregion

}
